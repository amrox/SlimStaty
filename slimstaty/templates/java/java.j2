{%- if access_specifier|length > 0 %}
{%   set access_specifier = access_specifier + " " %}
{% endif -%}

package {{ java_package }};

import java.util.HashSet;
import java.util.Set;

{{ access_specifier -}}
class {{ class_name }} {

    {{ access_specifier -}}
    enum State {
        {% for state in statemachine.states %}
        /**
          * State: {{ state }}
          */
        {{ state_names[state] }},
        {% endfor %}
    }

    {{ access_specifier -}}
    enum Event {
        {% for event in statemachine.events|sort %}
        /**
          * Event: {{ event }}
          */
        {{ event_names[event] }},
        {% endfor %}
    }

    {{ access_specifier -}}
    static class Exception extends java.lang.Exception {}

    {{ access_specifier -}}
    interface OnStateChangeListener {
        void onStateWillChange({{ class_name }} stateMachine, {{ class_name }}.State newState);
        void onStateDidChange({{ class_name }} stateMachine, {{ class_name }}.State newState);
    }

    {{ access_specifier -}}
    {{ class_name }}() {
    }

    {{ access_specifier -}}
    {{ class_name }}(State state) {
        this.state = state;
    }

    {{ access_specifier -}}
    State getState() {
        return state;
    }

    {{ access_specifier -}}
    synchronized State fire(Event event) throws Exception {

        /* Reset Events */
        {% for reset_event in statemachine.reset_events %}
        if (event == Event.{{ event_names[reset_event] }}) {
            return transition(State.{{ state_names[statemachine.states[0]] }});
        }
        {% endfor %}

        /* Normal Events */
        switch(state) {
        {% for state in statemachine.states %}
            case {{ state_names[state] }}: /* {{ state }} */
                switch(event) {
                {% for transition in statemachine.transitions %}
                {% if transition.from_state == state %}
                    case {{ event_names[transition.event] }}: /* on {{ transition.event }}  */
                        return transition(State.{{ state_names[transition.to_state] }}); /* -> {{ transition.to_state }} */
                {% endif %}
                {% endfor %}
                }
        {% endfor %}
        }

       throw new Exception();
    }

    private State transition(State state) {
        for (OnStateChangeListener l: listeners) {
            if (l != null) {
                l.onStateWillChange(this, state);
            }
        }
        this.state = state;
        for (OnStateChangeListener l: listeners) {
            if (l != null) {
                l.onStateDidChange(this, state);
            }
        }
        return this.state;
    }

    {{ access_specifier -}}
    synchronized void addListener(OnStateChangeListener listener) {
        listeners.add(listener);
    }

    {{ access_specifier -}}
    synchronized void removeListener(OnStateChangeListener listener) {
        listeners.remove(listener);
    }

    private State state = State.{{ state_names[statemachine.states[0]] }};
    private Set<OnStateChangeListener> listeners = new HashSet<>();
}
